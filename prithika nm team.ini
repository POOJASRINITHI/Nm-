#!/bin/bash

# Create project structure
mkdir -p myapp/.github/workflows myapp/k8s myapp/src
cd myapp

# 1. GitHub Actions Workflow
cat <<EOF > .github/workflows/deploy.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: \${{ secrets.DOCKER_USERNAME }}
        password: \${{ secrets.DOCKER_PASSWORD }}
    - name: Build and Push Docker Image
      run: |
        docker build -t myapp:\${{ github.sha }} -f src/Dockerfile src
        docker tag myapp:\${{ github.sha }} mydockerhub/myapp:\${{ github.sha }}
        docker push mydockerhub/myapp:\${{ github.sha }}
    - name: Update Kubernetes Manifest
      run: |
        sed -i "s|image: .*|image: mydockerhub/myapp:\${{ github.sha }}|" k8s/deployment.yaml
        git config user.name github-actions
        git config user.email github-actions@github.com
        git commit -am "Update image to \${{ github.sha }}"
        git push
EOF

# 2. Kubernetes Deployment YAML
cat <<EOF > k8s/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
spec:
  replicas: 2
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
        - name: myapp
          image: mydockerhub/myapp:latest
          ports:
            - containerPort: 80
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 20
EOF

# 3. Kubernetes Service YAML
cat <<EOF > k8s/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: myapp-service
spec:
  type: ClusterIP
  selector:
    app: myapp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
EOF

# 4. Dockerfile
cat <<EOF > src/Dockerfile
FROM python:3.10-slim

WORKDIR /app

COPY app.py .

RUN pip install flask

EXPOSE 80

CMD ["python", "app.py"]
EOF

# 5. Flask App
cat <<EOF > src/app.py
from flask import Flask
app = Flask(__name__)

@app.route('/')
def hello():
    return "Hello from GitOps-powered Flask app!"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=80)
EOF

# 6. .gitignore
cat <<EOF > .gitignore
__pycache__/
*.pyc
.env
EOF

# 7. .dockerignore
cat <<EOF > .dockerignore
__pycache__/
*.pyc
.env
EOF

# 8. README
cat <<EOF > README.md
# GitOps Flask App

A simple Flask app with GitOps, CI/CD, and Kubernetes using GitHub Actions + ArgoCD.

## Setup
1. Fork & clone the repo.
2. Set GitHub Secrets: DOCKER_USERNAME & DOCKER_PASSWORD.
3. Connect Argo CD to this repo.
4. Push to \`main\` — auto deploys!
EOF

echo "✅ Project initialized in $(pwd)"
